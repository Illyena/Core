package illyena.gilding.core.util.data;

import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricTagProvider;
import net.minecraft.block.Block;
import net.minecraft.registry.Registries;
import net.minecraft.registry.RegistryKeys;
import net.minecraft.registry.RegistryWrapper;
import net.minecraft.registry.tag.BlockTags;
import net.minecraft.registry.tag.TagKey;
import net.minecraft.util.Identifier;

import java.util.concurrent.CompletableFuture;

import static illyena.gilding.GildingInit.SUPER_MOD_ID;

public class GildingBlockTagGenerator extends FabricTagProvider<Block> {
    public static final TagKey<Block> MAGIC_MINEABLE        = TagKey.of(Registries.BLOCK.getKey(), new Identifier(SUPER_MOD_ID, "mineable/magic"));

    public static final TagKey<Block> NEEDS_TOOL_LEVEL_5    = TagKey.of(Registries.BLOCK.getKey(), new Identifier("fabric", "needs_tool_level_5"));

    public static final TagKey<Block> DRAGON_IMMUNE                 = TagKey.of(Registries.BLOCK.getKey(), new Identifier(SUPER_MOD_ID, "dragon_immune"));
    public static final TagKey<Block> WITHER_IMMUNE                 = TagKey.of(Registries.BLOCK.getKey(), new Identifier(SUPER_MOD_ID, "wither_immune"));
    public static final TagKey<Block> PORTALS                       = TagKey.of(Registries.BLOCK.getKey(), new Identifier(SUPER_MOD_ID, "portals"));
    public static final TagKey<Block> SHULKER_BOXES                 = TagKey.of(Registries.BLOCK.getKey(), new Identifier(SUPER_MOD_ID, "shulker_boxes"));
    public static final TagKey<Block> HOGLIN_REPELLENTS             = TagKey.of(Registries.BLOCK.getKey(), new Identifier(SUPER_MOD_ID, "hoglin_repellents"));
    public static final TagKey<Block> GUARDED_BY_PIGLINS            = TagKey.of(Registries.BLOCK.getKey(), new Identifier(SUPER_MOD_ID, "guarded_by_piglins"));
    public static final TagKey<Block> OCCLUDES_VIBRATION_SIGNALS    = TagKey.of(Registries.BLOCK.getKey(), new Identifier(SUPER_MOD_ID, "occludes_vibration_signals"));
    public static final TagKey<Block> FEATURES_CANNOT_REPLACE       = TagKey.of(Registries.BLOCK.getKey(), new Identifier(SUPER_MOD_ID, "features_cannot_replace"));
    public static final TagKey<Block> GEODE_INVALID_BLOCKS          = TagKey.of(Registries.BLOCK.getKey(), new Identifier(SUPER_MOD_ID, "geode_invalid_blocks"));

    public GildingBlockTagGenerator(FabricDataOutput output, CompletableFuture<RegistryWrapper.WrapperLookup> registriesFuture) {
        super(output, RegistryKeys.BLOCK, registriesFuture);
    }

    @Override
    protected void configure(RegistryWrapper.WrapperLookup arg) {
//        getOrCreateTagBuilder(BlockTags.WOOL);
//        getOrCreateTagBuilder(BlockTags.PLANKS);
//        getOrCreateTagBuilder(BlockTags.STONE_BRICKS);
//        getOrCreateTagBuilder(BlockTags.WOODEN_BUTTONS);
//        getOrCreateTagBuilder(BlockTags.BUTTONS);
//        getOrCreateTagBuilder(BlockTags.WOOL_CARPETS);
//        getOrCreateTagBuilder(BlockTags.WOODEN_DOORS);
//        getOrCreateTagBuilder(BlockTags.WOODEN_STAIRS);
//        getOrCreateTagBuilder(BlockTags.WOODEN_SLABS);
//        getOrCreateTagBuilder(BlockTags.WOODEN_FENCES);
//        getOrCreateTagBuilder(BlockTags.PRESSURE_PLATES);
//        getOrCreateTagBuilder(BlockTags.WOODEN_PRESSURE_PLATES);
//        getOrCreateTagBuilder(BlockTags.STONE_PRESSURE_PLATES);
//        getOrCreateTagBuilder(BlockTags.WOODEN_TRAPDOORS);
//        getOrCreateTagBuilder(BlockTags.DOORS);
//        getOrCreateTagBuilder(BlockTags.SAPLINGS);
//        getOrCreateTagBuilder(BlockTags.LOGS_THAT_BURN);
//        getOrCreateTagBuilder(BlockTags.OVERWORLD_NATURAL_LOGS);
//        getOrCreateTagBuilder(BlockTags.LOGS);
//        getOrCreateTagBuilder(BlockTags.DARK_OAK_LOGS);
//        getOrCreateTagBuilder(BlockTags.OAK_LOGS);
//        getOrCreateTagBuilder(BlockTags.BIRCH_LOGS);
//        getOrCreateTagBuilder(BlockTags.ACACIA_LOGS);
//        getOrCreateTagBuilder(BlockTags.JUNGLE_LOGS);
//        getOrCreateTagBuilder(BlockTags.SPRUCE_LOGS);
//        getOrCreateTagBuilder(BlockTags.MANGROVE_LOGS);
//        getOrCreateTagBuilder(BlockTags.CRIMSON_STEMS);
//        getOrCreateTagBuilder(BlockTags.WARPED_STEMS);
//        getOrCreateTagBuilder(BlockTags.WART_BLOCKS);
//        getOrCreateTagBuilder(BlockTags.BANNERS);
//        getOrCreateTagBuilder(BlockTags.SAND);
//        getOrCreateTagBuilder(BlockTags.STAIRS);
//        getOrCreateTagBuilder(BlockTags.SLABS);
//        getOrCreateTagBuilder(BlockTags.WALLS);
//        getOrCreateTagBuilder(BlockTags.ANVIL);
//        getOrCreateTagBuilder(BlockTags.RAILS);
//        getOrCreateTagBuilder(BlockTags.LEAVES);
//        getOrCreateTagBuilder(BlockTags.TRAPDOORS);
//        getOrCreateTagBuilder(BlockTags.SMALL_FLOWERS);
//        getOrCreateTagBuilder(BlockTags.BEDS);
//        getOrCreateTagBuilder(BlockTags.FENCES);
//        getOrCreateTagBuilder(BlockTags.TALL_FLOWERS);
//        getOrCreateTagBuilder(BlockTags.FLOWERS);
//        getOrCreateTagBuilder(BlockTags.PIGLIN_REPELLENTS);
//        getOrCreateTagBuilder(BlockTags.GOLD_ORES);
//        getOrCreateTagBuilder(BlockTags.IRON_ORES);
//        getOrCreateTagBuilder(BlockTags.DIAMOND_ORES);
//        getOrCreateTagBuilder(BlockTags.REDSTONE_ORES);
//        getOrCreateTagBuilder(BlockTags.LAPIS_ORES);
//        getOrCreateTagBuilder(BlockTags.COAL_ORES);
//        getOrCreateTagBuilder(BlockTags.EMERALD_ORES);
//        getOrCreateTagBuilder(BlockTags.COPPER_ORES);
//        getOrCreateTagBuilder(BlockTags.NON_FLAMMABLE_WOOD);
//        getOrCreateTagBuilder(BlockTags.CANDLES);
//        getOrCreateTagBuilder(BlockTags.DIRT);
//        getOrCreateTagBuilder(BlockTags.TERRACOTTA);
//        getOrCreateTagBuilder(BlockTags.COMPLETES_FIND_TREE_TUTORIAL);
//        getOrCreateTagBuilder(BlockTags.FLOWER_POTS);
//        getOrCreateTagBuilder(BlockTags.ENDERMAN_HOLDABLE);
//        getOrCreateTagBuilder(BlockTags.ICE);
//        getOrCreateTagBuilder(BlockTags.VALID_SPAWN);
//        getOrCreateTagBuilder(BlockTags.IMPERMEABLE);
//        getOrCreateTagBuilder(BlockTags.UNDERWATER_BONEMEALS);
//        getOrCreateTagBuilder(BlockTags.CORAL_BLOCKS);
//        getOrCreateTagBuilder(BlockTags.WALL_CORALS);
//        getOrCreateTagBuilder(BlockTags.CORAL_PLANTS);
//        getOrCreateTagBuilder(BlockTags.CORALS);
//        getOrCreateTagBuilder(BlockTags.BAMBOO_PLANTABLE_ON);
//        getOrCreateTagBuilder(BlockTags.STANDING_SIGNS);
//        getOrCreateTagBuilder(BlockTags.WALL_SIGNS);
//        getOrCreateTagBuilder(BlockTags.SIGNS);
          getOrCreateTagBuilder(BlockTags.DRAGON_IMMUNE).addOptionalTag(DRAGON_IMMUNE);
//        getOrCreateTagBuilder(BlockTags.DRAGON_TRANSPARENT);
          getOrCreateTagBuilder(BlockTags.WITHER_IMMUNE).addOptionalTag(WITHER_IMMUNE);
//        getOrCreateTagBuilder(BlockTags.WITHER_SUMMON_BASE_BLOCKS);
//        getOrCreateTagBuilder(BlockTags.BEEHIVES);
//        getOrCreateTagBuilder(BlockTags.CROPS);
//        getOrCreateTagBuilder(BlockTags.BEE_GROWABLES);
          getOrCreateTagBuilder(BlockTags.PORTALS).addOptionalTag(PORTALS);
//        getOrCreateTagBuilder(BlockTags.FIRE);
//        getOrCreateTagBuilder(BlockTags.NYLIUM);
//        getOrCreateTagBuilder(BlockTags.BEACON_BASE_BLOCKS);
//        getOrCreateTagBuilder(BlockTags.SOUL_SPEED_BLOCKS);
//        getOrCreateTagBuilder(BlockTags.WALL_POST_OVERRIDE);
//        getOrCreateTagBuilder(BlockTags.CLIMBABLE);
//        getOrCreateTagBuilder(BlockTags.FALL_DAMAGE_RESETTING);
          getOrCreateTagBuilder(BlockTags.SHULKER_BOXES).addOptionalTag(SHULKER_BOXES);
          getOrCreateTagBuilder(BlockTags.HOGLIN_REPELLENTS).addOptionalTag(HOGLIN_REPELLENTS);
//        getOrCreateTagBuilder(BlockTags.SOUL_FIRE_BASE_BLOCKS);
//        getOrCreateTagBuilder(BlockTags.STRIDER_WARM_BLOCKS);
//        getOrCreateTagBuilder(BlockTags.CAMPFIRES);
          getOrCreateTagBuilder(BlockTags.GUARDED_BY_PIGLINS).addOptionalTag(GUARDED_BY_PIGLINS);
//        getOrCreateTagBuilder(BlockTags.PREVENT_MOB_SPAWNING_INSIDE);
//        getOrCreateTagBuilder(BlockTags.FENCE_GATES);
//        getOrCreateTagBuilder(BlockTags.UNSTABLE_BOTTOM_CENTER);
//        getOrCreateTagBuilder(BlockTags.MUSHROOM_GROW_BLOCK);
//        getOrCreateTagBuilder(BlockTags.INFINIBURN_OVERWORLD);
//        getOrCreateTagBuilder(BlockTags.INFINIBURN_NETHER);
//        getOrCreateTagBuilder(BlockTags.INFINIBURN_END);
//        getOrCreateTagBuilder(BlockTags.BASE_STONE_OVERWORLD);
//        getOrCreateTagBuilder(BlockTags.STONE_ORE_REPLACEABLES);
//        getOrCreateTagBuilder(BlockTags.DEEPSLATE_ORE_REPLACEABLES);
//        getOrCreateTagBuilder(BlockTags.BASE_STONE_NETHER);
//        getOrCreateTagBuilder(BlockTags.OVERWORLD_CARVER_REPLACEABLES);
//        getOrCreateTagBuilder(BlockTags.NETHER_CARVER_REPLACEABLES);
//        getOrCreateTagBuilder(BlockTags.CANDLE_CAKES);
//        getOrCreateTagBuilder(BlockTags.CAULDRONS);
//        getOrCreateTagBuilder(BlockTags.CRYSTAL_SOUND_BLOCKS);
//        getOrCreateTagBuilder(BlockTags.INSIDE_STEP_SOUND_BLOCKS);
          getOrCreateTagBuilder(BlockTags.OCCLUDES_VIBRATION_SIGNALS).addOptionalTag(OCCLUDES_VIBRATION_SIGNALS);
//        getOrCreateTagBuilder(BlockTags.DAMPENS_VIBRATIONS);
//        getOrCreateTagBuilder(BlockTags.DRIPSTONE_REPLACEABLE_BLOCKS);
//        getOrCreateTagBuilder(BlockTags.CAVE_VINES);
//        getOrCreateTagBuilder(BlockTags.MOSS_REPLACEABLE);
//        getOrCreateTagBuilder(BlockTags.LUSH_GROUND_REPLACEABLE);
//        getOrCreateTagBuilder(BlockTags.AZALEA_ROOT_REPLACEABLE);
//        getOrCreateTagBuilder(BlockTags.SMALL_DRIPLEAF_PLACEABLE);
//        getOrCreateTagBuilder(BlockTags.BIG_DRIPLEAF_PLACEABLE);
//        getOrCreateTagBuilder(BlockTags.SNOW);
//        getOrCreateTagBuilder(BlockTags.AXE_MINEABLE);
//        getOrCreateTagBuilder(BlockTags.HOE_MINEABLE);
//        getOrCreateTagBuilder(BlockTags.PICKAXE_MINEABLE);
//        getOrCreateTagBuilder(BlockTags.SHOVEL_MINEABLE);
//        getOrCreateTagBuilder(BlockTags.NEEDS_DIAMOND_TOOL);
//        getOrCreateTagBuilder(BlockTags.NEEDS_IRON_TOOL);
//        getOrCreateTagBuilder(BlockTags.NEEDS_STONE_TOOL);
          getOrCreateTagBuilder(BlockTags.FEATURES_CANNOT_REPLACE).addOptionalTag(FEATURES_CANNOT_REPLACE);
//        getOrCreateTagBuilder(BlockTags.LAVA_POOL_STONE_CANNOT_REPLACE);
          getOrCreateTagBuilder(BlockTags.GEODE_INVALID_BLOCKS).addOptionalTag(GEODE_INVALID_BLOCKS);
//        getOrCreateTagBuilder(BlockTags.FROG_PREFER_JUMP_TO);
//        getOrCreateTagBuilder(BlockTags.SCULK_REPLACEABLE);
//        getOrCreateTagBuilder(BlockTags.SCULK_REPLACEABLE_WORLD_GEN);
//        getOrCreateTagBuilder(BlockTags.ANCIENT_CITY_REPLACEABLE);
//        getOrCreateTagBuilder(BlockTags.ANIMALS_SPAWNABLE_ON);
//        getOrCreateTagBuilder(BlockTags.AXOLOTLS_SPAWNABLE_ON);
//        getOrCreateTagBuilder(BlockTags.GOATS_SPAWNABLE_ON);
//        getOrCreateTagBuilder(BlockTags.MOOSHROOMS_SPAWNABLE_ON);
//        getOrCreateTagBuilder(BlockTags.PARROTS_SPAWNABLE_ON);
//        getOrCreateTagBuilder(BlockTags.POLAR_BEARS_SPAWNABLE_ON_ALTERNATE);
//        getOrCreateTagBuilder(BlockTags.RABBITS_SPAWNABLE_ON);
//        getOrCreateTagBuilder(BlockTags.FOXES_SPAWNABLE_ON);
//        getOrCreateTagBuilder(BlockTags.WOLVES_SPAWNABLE_ON);
//        getOrCreateTagBuilder(BlockTags.FROGS_SPAWNABLE_ON);
//        getOrCreateTagBuilder(BlockTags.AZALEA_GROWS_ON);
//        getOrCreateTagBuilder(BlockTags.REPLACEABLE_PLANTS);
//        getOrCreateTagBuilder(BlockTags.CONVERTABLE_TO_MUD);
//        getOrCreateTagBuilder(BlockTags.MANGROVE_LOGS_CAN_GROW_THROUGH);
//        getOrCreateTagBuilder(BlockTags.MANGROVE_ROOTS_CAN_GROW_THROUGH);
//        getOrCreateTagBuilder(BlockTags.DEAD_BUSH_MAY_PLACE_ON);
//        getOrCreateTagBuilder(BlockTags.SNAPS_GOAT_HORN);
//        getOrCreateTagBuilder(BlockTags.SNOW_LAYER_CANNOT_SURVIVE_ON);
//        getOrCreateTagBuilder(BlockTags.SNOW_LAYER_CAN_SURVIVE_ON);
    }
}
